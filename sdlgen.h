//---------------------------------------------------------------
// Generated by SDL*Designer on Sun Apr 23 20:00:44 1995
// from AST form of source files:
//	abs.sdl
// SDL*Designer written by Graham Wheeler
// (c) 1994 by Graham Wheeler and the DNA Laboratory
//---------------------------------------------------------------

//---------------------------------------------------------
// Block type IDs

typedef enum
{
	provider_ID,
	protocol_ID,
	user_ID
} block_type_t;

//---------------------------------------------------------
// Process type IDs

typedef enum
{
	provider_provcontrol_ID,
	protocol_protcontrol_ID,
	user_usercontrol_ID
} process_type_t;

//---------------------------------------------------------
// Signal type IDs and names

typedef enum
{
	u_data_req_ID,
	u_data_rsp_ID,
	u_data_ind_ID,
	p_data_req_ID,
	p_data_ind_ID,
	p_ack_req_ID,
	p_ack_ind_ID,
	protocol_protcontrol_timeout_ID,
	user_usercontrol_senddelay_ID
} signal_type_t;

//---------------------------------------------------------
// Top-level data types

typedef integer_typ packet_typ[2];


//---------------------------------------------------------
// Top-level signals

class u_data_req_t : public signal_t
{
public:
	packet_typ arg_1;
	u_data_req_t()
	{
		memset(this, 0, sizeof(u_data_req_t));
		id = u_data_req_ID;
	}
};

class u_data_rsp_t : public signal_t
{
public:
	u_data_rsp_t()
	{
		id = u_data_rsp_ID;
	}
};

class u_data_ind_t : public signal_t
{
public:
	packet_typ arg_1;
	u_data_ind_t()
	{
		memset(this, 0, sizeof(u_data_ind_t));
		id = u_data_ind_ID;
	}
};

class p_data_req_t : public signal_t
{
public:
	integer_typ arg_1;
	packet_typ arg_2;
	p_data_req_t()
	{
		memset(this, 0, sizeof(p_data_req_t));
		id = p_data_req_ID;
	}
};

class p_data_ind_t : public signal_t
{
public:
	integer_typ arg_1;
	packet_typ arg_2;
	p_data_ind_t()
	{
		memset(this, 0, sizeof(p_data_ind_t));
		id = p_data_ind_ID;
	}
};

class p_ack_req_t : public signal_t
{
public:
	integer_typ arg_1;
	p_ack_req_t()
	{
		memset(this, 0, sizeof(p_ack_req_t));
		id = p_ack_req_ID;
	}
};

class p_ack_ind_t : public signal_t
{
public:
	integer_typ arg_1;
	p_ack_ind_t()
	{
		memset(this, 0, sizeof(p_ack_ind_t));
		id = p_ack_ind_ID;
	}
};


//---------------------------------------------------------
class provider_provcontrol;
class protocol_protcontrol;
class user_usercontrol;

//---------------------------------------------------------
// Class for process provider_provcontrol

class provider_provcontrol : public SDL_process_t
{
	enum state_t
	{
		idle_ID
	};
	integer_typ	  provider_provcontrol_seq;
	packet_typ	  provider_provcontrol_data;
public:
	provider_provcontrol(int ppid_in = 0);
	~provider_provcontrol();
	char*		StateName(int s);
	void		Input(int d, int sigid);
	exec_result_t	Action(int a);
};


//---------------------------------------------------------
// Timers for process protocol_protcontrol

class protocol_protcontrol_timeout_t : public signal_t
{
public:
	protocol_protcontrol_timeout_t()
	{
		isTimer = 1;
		id = protocol_protcontrol_timeout_ID;
	}
};


//---------------------------------------------------------
// Class for process protocol_protcontrol

class protocol_protcontrol : public SDL_process_t
{
	enum state_t
	{
		idle_ID,
		wait_ID
	};
	integer_typ	  protocol_protcontrol_sn;
	integer_typ	  protocol_protcontrol_rn;
	integer_typ	  protocol_protcontrol_seq;
	packet_typ	  protocol_protcontrol_data;
	duration_typ	  protocol_protcontrol_tm;
public:
	protocol_protcontrol(int ppid_in = 0);
	~protocol_protcontrol();
	char*		StateName(int s);
	void		Input(int d, int sigid);
	int		CompareTimer(int idx, signal_t *s);
	exec_result_t	Action(int a);
};


//---------------------------------------------------------
// Timers for process user_usercontrol

class user_usercontrol_senddelay_t : public signal_t
{
public:
	user_usercontrol_senddelay_t()
	{
		isTimer = 1;
		id = user_usercontrol_senddelay_ID;
	}
};


//---------------------------------------------------------
// Class for process user_usercontrol

class user_usercontrol : public SDL_process_t
{
	enum state_t
	{
		sendfirst_ID,
		idle_ID
	};
	packet_typ	  user_usercontrol_data;
	duration_typ	  user_usercontrol_delaywait;
	integer_typ	  user_usercontrol_counter;
public:
	user_usercontrol(int ppid_in = 0);
	~user_usercontrol();
	char*		StateName(int s);
	void		Input(int d, int sigid);
	int		CompareTimer(int idx, signal_t *s);
	exec_result_t	Action(int a);
};

